forms=[{"_id":"8a1a2b6a873c418eb72a5f07dc923f43","type":"WaterTest","name":"Aquagenx 100 mL Presence / Absence Bag Test","desc":"100 mL presence / absence test for E. coli","code":"Aquagenx100PA","_rev":2,"created":{"on":"2013-07-17T14:03:49.869Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:34.362Z","by":"admin"},"user":"admin","views":{"detail":"var template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var stack1;\n  if (stack1 = helpers.source) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.source; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  return escapeExpression(stack1);\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"<i>None</i>\";\n  }\n\nfunction program5(depth0,data) {\n  \n  \n  return \"Present\";\n  }\n\nfunction program7(depth0,data) {\n  \n  \n  return \"Absent\";\n  }\n\n  buffer += \"\\n<div><strong><i>Water Source ID</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.source, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n<div><strong><i>E.Coli</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.ecoli_present, {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n\\n<!-- TODO photo display -->\\n\\n<div>Dilution: \";\n  if (stack1 = helpers.dilution) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.dilution; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n<div>Notes: \";\n  if (stack1 = helpers.notes) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.notes; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\";\n  return buffer;\n  });var view = Backbone.View.extend({\n  load: function(data) {\n    this.$el.html(template(data));\n  }\n});\nreturn new view();","edit":"var forms, model, questions;\n\nforms = require('forms');\n\nmodel = new Backbone.Model();\n\nquestions = [];\n\nquestions.push(new forms.Instructions({\n  text: \"Incubate at 37 C for 24 hours or at 25 - 37 C for 48 hours\"\n}));\n\nquestions.push(new forms.SourceQuestion({\n  id: 'source',\n  ctx: options.ctx,\n  model: model,\n  prompt: \"Water Source ID\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'dilution',\n  model: model,\n  prompt: \"Dilution factor\",\n  hint: \"e.g. 10 means a 1:10 dilution\",\n  required: true\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: 'ecoli_present',\n  model: model,\n  prompt: \"Did the liquid change color from yellow to green or bluish green? (E. coli)\",\n  hint: \"If any portion of the liquid in the bag changes color, record as positive\",\n  options: [[true, 'Yes'], [false, 'No']],\n  required: true\n}));\n\nquestions.push(new forms.ImageQuestion({\n  id: 'photo',\n  model: model,\n  prompt: \"Photo\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: 'notes',\n  model: model,\n  prompt: \"Notes\",\n  multiline: true\n}));\n\nreturn new forms.WaterTestEditView({\n  contents: questions,\n  model: model,\n  defaults: {\n    dilution: 1\n  }\n});\n"}},{"_id":"bfd55312bb6e41ebb8e543ea2fe417f8","type":"WaterTest","name":"Arsenic (generic method)","desc":"Any method for measuring arsenic in water","code":"ArsenicGeneric","_rev":2,"created":{"on":"2013-07-17T14:03:50.050Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:34.608Z","by":"admin"},"user":"admin","views":{"detail":"var template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var stack1;\n  if (stack1 = helpers.source) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.source; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  return escapeExpression(stack1);\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"<i>None</i>\";\n  }\n\n  buffer += \"\\n<div><strong><i>Water Source ID</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.source, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n<div><strong><i>Arsenic</i></strong>: \";\n  if (stack1 = helpers.As_mgperL) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.As_mgperL; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \" mg/L</div>\\n\\n<!-- TODO photo display -->\\n\\n<div>Notes: \";\n  if (stack1 = helpers.notes) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.notes; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\";\n  return buffer;\n  });var view = Backbone.View.extend({\n  load: function(data) {\n    this.$el.html(template(data));\n  }\n});\nreturn new view();","edit":"var forms, model, questions;\n\nforms = require('forms');\n\nmodel = new Backbone.Model();\n\nquestions = [];\n\nquestions.push(new forms.SourceQuestion({\n  id: 'source',\n  ctx: options.ctx,\n  model: model,\n  prompt: \"Water Source ID\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'As_mgperL',\n  model: model,\n  prompt: \"Arsenic (mg / L)\",\n  required: true,\n  decimal: true\n}));\n\nquestions.push(new forms.ImageQuestion({\n  id: 'photo',\n  model: model,\n  prompt: \"Photo\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: 'notes',\n  model: model,\n  prompt: \"Notes\",\n  multiline: true\n}));\n\nreturn new forms.WaterTestEditView({\n  contents: questions,\n  model: model\n});\n"}},{"_id":"2700e4115f5e49c28b8e05bbbcb99e7f","type":"WaterTest","name":"Colilert MPN tube","desc":"10 mL presence / absence test for E. coli and total coliform","code":"ColilertMPN","_rev":2,"created":{"on":"2013-07-17T14:03:50.289Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:34.870Z","by":"admin"},"user":"admin","views":{"detail":"var template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var stack1;\n  if (stack1 = helpers.source) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.source; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  return escapeExpression(stack1);\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"<i>None</i>\";\n  }\n\nfunction program5(depth0,data) {\n  \n  \n  return \"Present\";\n  }\n\nfunction program7(depth0,data) {\n  \n  \n  return \"Absent\";\n  }\n\n  buffer += \"\\n<div><strong><i>Water Source ID</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.source, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n<div><strong><i>E.Coli</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.ecoli_present, {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n<div><strong><i>Total Coliform</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.tc_present, {hash:{},inverse:self.program(7, program7, data),fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n\\n<!-- TODO photo display -->\\n\\n<div>Dilution: \";\n  if (stack1 = helpers.dilution) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.dilution; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n<div>Notes: \";\n  if (stack1 = helpers.notes) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.notes; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\";\n  return buffer;\n  });var view = Backbone.View.extend({\n  load: function(data) {\n    this.$el.html(template(data));\n  }\n});\nreturn new view();","edit":"var forms, model, questions;\n\nforms = require('forms');\n\nmodel = new Backbone.Model();\n\nquestions = [];\n\nquestions.push(new forms.Instructions({\n  text: \"Incubate at 37 C for 24 hours\"\n}));\n\nquestions.push(new forms.SourceQuestion({\n  id: 'source',\n  ctx: options.ctx,\n  model: model,\n  prompt: \"Water Source ID\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'dilution',\n  model: model,\n  prompt: \"Dilution factor\",\n  hint: \"e.g. 10 means a 1:10 dilution\",\n  required: true\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: 'tc_present',\n  model: model,\n  prompt: \"Did the liquid change color to yellow? (total coliform)\",\n  options: [[true, 'Yes'], [false, 'No']],\n  required: true\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: 'ecoli_present',\n  model: model,\n  prompt: \"Does the liquid glow bluish under UV light? (E. coli)\",\n  options: [[true, 'Yes'], [false, 'No']],\n  required: true\n}));\n\nquestions.push(new forms.ImageQuestion({\n  id: 'photo',\n  model: model,\n  prompt: \"Photo\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: 'notes',\n  model: model,\n  prompt: \"Notes\",\n  multiline: true\n}));\n\nreturn new forms.WaterTestEditView({\n  contents: questions,\n  model: model,\n  defaults: {\n    dilution: 1\n  }\n});\n"}},{"_id":"15e86b2a5abe41b9b8f1b83edb7de3dd","type":"WaterTest","name":"Compact Dry EC Plate","desc":"1 mL direct count plate method for E. coli and total coliform","code":"CompactDryEC","_rev":2,"created":{"on":"2013-07-17T14:03:50.508Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:35.070Z","by":"admin"},"user":"admin","views":{"detail":"var template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var stack1;\n  if (stack1 = helpers.source) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.source; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  return escapeExpression(stack1);\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"<i>None</i>\";\n  }\n\n  buffer += \"\\n<div><strong><i>Water Source ID</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.source, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n\\n<div><strong><i>E.Coli Colonies</i></strong>: \";\n  if (stack1 = helpers.ecoli_count) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.ecoli_count; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n<div><strong><i>Total Coliform Colonies</i></strong>: \";\n  if (stack1 = helpers.tc_count) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.tc_count; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n\\n<!-- TODO photo display -->\\n\\n<div>Dilution: \";\n  if (stack1 = helpers.dilution) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.dilution; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n<div>Notes: \";\n  if (stack1 = helpers.notes) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.notes; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\";\n  return buffer;\n  });var view = Backbone.View.extend({\n  load: function(data) {\n    this.$el.html(template(data));\n  }\n});\nreturn new view();","edit":"var forms, model, questions;\n\nforms = require('forms');\n\nmodel = new Backbone.Model();\n\nquestions = [];\n\nquestions.push(new forms.Instructions({\n  text: \"Incubate at 37 C for 24 hours\"\n}));\n\nquestions.push(new forms.SourceQuestion({\n  id: 'source',\n  ctx: options.ctx,\n  model: model,\n  prompt: \"Water Source ID\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'dilution',\n  model: model,\n  prompt: \"Dilution factor\",\n  hint: \"e.g. 10 means a 1:10 dilution\",\n  required: true\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'ecoli_count',\n  model: model,\n  prompt: \"Number of blue colonies (E. coli)\",\n  required: true,\n  conditional: function() {\n    return this.model.get('ecoli_tntc') !== true;\n  }\n}));\n\nquestions.push(new forms.CheckQuestion({\n  id: 'ecoli_tntc',\n  model: model,\n  prompt: \"\",\n  text: \"Blue colonies too numerous to count\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'tc_count',\n  model: model,\n  prompt: \"Number of red colonies (total coliform)\",\n  conditional: function() {\n    return this.model.get('tc_tntc') !== true;\n  }\n}));\n\nquestions.push(new forms.CheckQuestion({\n  id: 'tc_tntc',\n  model: model,\n  prompt: \"\",\n  text: \"Red colonies too numerous to count\"\n}));\n\nquestions.push(new forms.ImageQuestion({\n  id: 'photo',\n  model: model,\n  prompt: \"Photo\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: 'notes',\n  model: model,\n  prompt: \"Notes\",\n  multiline: true\n}));\n\nreturn new forms.WaterTestEditView({\n  contents: questions,\n  model: model,\n  defaults: {\n    dilution: 1\n  },\n  save: function() {\n    var data;\n    data = model.toJSON();\n    if (data.ecoli_tntc) {\n      delete data.ecoli_count;\n    }\n    if (data.tc_tntc) {\n      delete data.tc_count;\n    }\n    return data;\n  }\n});\n"}},{"_id":"6deede4bb11941ffa3680578de41aca5","type":"WaterTest","name":"Fluoride (generic method)","desc":"Any method for measuring fluoride in water","code":"FluorideGeneric","_rev":2,"created":{"on":"2013-07-17T14:03:50.726Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:35.280Z","by":"admin"},"user":"admin","views":{"detail":"var template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var stack1;\n  if (stack1 = helpers.source) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.source; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  return escapeExpression(stack1);\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"<i>None</i>\";\n  }\n\n  buffer += \"\\n<div><strong><i>Water Source ID</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.source, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n<div><strong><i>Fluoride</i></strong>: \";\n  if (stack1 = helpers.F_mgperL) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.F_mgperL; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \" mg/L</div>\\n\\n<!-- TODO photo display -->\\n\\n<div>Notes: \";\n  if (stack1 = helpers.notes) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.notes; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\";\n  return buffer;\n  });var view = Backbone.View.extend({\n  load: function(data) {\n    this.$el.html(template(data));\n  }\n});\nreturn new view();","edit":"var forms, model, questions;\n\nforms = require('forms');\n\nmodel = new Backbone.Model();\n\nquestions = [];\n\nquestions.push(new forms.SourceQuestion({\n  id: 'source',\n  ctx: options.ctx,\n  model: model,\n  prompt: \"Water Source ID\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'F_mgperL',\n  model: model,\n  prompt: \"Fluoride (mg / L)\",\n  required: true,\n  decimal: true\n}));\n\nquestions.push(new forms.ImageQuestion({\n  id: 'photo',\n  model: model,\n  prompt: \"Photo\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: 'notes',\n  model: model,\n  prompt: \"Notes\",\n  multiline: true\n}));\n\nreturn new forms.WaterTestEditView({\n  contents: questions,\n  model: model\n});\n"}},{"_id":"e54d3bb4a4c8450abd2d0d88c8e046eb","type":"WaterTest","name":"3M Petrifilm E. coli/coliform","desc":"1 mL direct count method for E. coli and total coliform","code":"PetrifilmEcoliColiform","_rev":2,"created":{"on":"2013-07-17T14:03:50.949Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:35.459Z","by":"admin"},"user":"admin","views":{"detail":"var template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var stack1;\n  if (stack1 = helpers.source) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.source; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  return escapeExpression(stack1);\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"<i>None</i>\";\n  }\n\n  buffer += \"\\n<div><strong><i>Water Source ID</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.source, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n\\n<div><strong><i>E.Coli Colonies</i></strong>: \";\n  if (stack1 = helpers.ecoli_count) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.ecoli_count; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n<div><strong><i>Total Coliform Colonies</i></strong>: \";\n  if (stack1 = helpers.tc_count) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.tc_count; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n<div><strong><i>Gram Negative Non-coliforms</i></strong>: \";\n  if (stack1 = helpers.gnnc_count) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.gnnc_count; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n\\n<!-- TODO photo display -->\\n\\n<div>Dilution: \";\n  if (stack1 = helpers.dilution) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.dilution; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\\n<div>Notes: \";\n  if (stack1 = helpers.notes) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.notes; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\";\n  return buffer;\n  });var view = Backbone.View.extend({\n  load: function(data) {\n    this.$el.html(template(data));\n  }\n});\nreturn new view();","edit":"var forms, model, questions;\n\nforms = require('forms');\n\nmodel = new Backbone.Model();\n\nquestions = [];\n\nquestions.push(new forms.Instructions({\n  text: \"Incubate at 37 C for 24 hours\"\n}));\n\nquestions.push(new forms.SourceQuestion({\n  id: 'source',\n  ctx: options.ctx,\n  model: model,\n  prompt: \"Water Source ID\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'dilution',\n  model: model,\n  prompt: \"Dilution factor\",\n  hint: \"e.g. 10 means a 1:10 dilution\",\n  required: true\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'ecoli_count',\n  model: model,\n  prompt: \"Number of blue colonies with gas bubbles (E. coli)\",\n  required: true\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'tc_count',\n  model: model,\n  prompt: \"Number of red colonies with gas bubbles (total coliform)\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'gnnc_count',\n  model: model,\n  prompt: \"Number of red colonies with no gas bubble (gram negative non-coliforms)\"\n}));\n\nquestions.push(new forms.ImageQuestion({\n  id: 'photo',\n  model: model,\n  prompt: \"Photo\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: 'notes',\n  model: model,\n  prompt: \"Notes\",\n  multiline: true\n}));\n\nreturn new forms.WaterTestEditView({\n  contents: questions,\n  model: model,\n  defaults: {\n    dilution: 1\n  }\n});\n"}},{"_id":"3632fce3ca60476e87abf1f901e8a507","type":"Survey","name":"Sample Survey","code":"Sample","_rev":2,"created":{"on":"2013-07-17T14:03:51.789Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:35.829Z","by":"admin"},"user":"admin","views":{"edit":"var forms, model, questions, sections, view;\n\nforms = require(\"forms\");\n\nmodel = new Backbone.Model();\n\nsections = [];\n\nquestions = [];\n\nquestions.push(new forms.TextQuestion({\n  id: \"q2\",\n  model: model,\n  prompt: \"Enter a text value\"\n}));\n\nquestions.push(new forms.DateQuestion({\n  id: \"q5\",\n  model: model,\n  prompt: \"Select a date\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: \"q6\",\n  model: model,\n  prompt: \"Enter a number\"\n}));\n\nquestions.push(new forms.DropdownQuestion({\n  id: \"q1\",\n  model: model,\n  prompt: \"Select from the dropdown\",\n  options: [[\"PipedWater\", \"Piped Water\"], [\"PipedWaterRes\", \"Piped Water with Service Reservoir\"], [\"GravityFedPiped\", \"Gravity-fed Piped Water\"], [\"BoreholeMech\", \"Deep Borehole with Mechanized Pumping\"], [\"BoreholeHand\", \"Deep Borehole with Handpump\"], [\"ProtectedSpring\", \"Protected Spring\"], [\"DugWellPump\", \"Dug Well with Handpump/windlass\"], [\"TreatmentPlant\", \"Water Treatment Plant\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q8\",\n  model: model,\n  prompt: \"Select from radio buttons\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.CheckQuestion({\n  id: \"q9\",\n  model: model,\n  prompt: \"Confirm a statement\",\n  text: \"Checkbox statement\"\n}));\n\nquestions.push(new forms.MulticheckQuestion({\n  id: \"q10\",\n  model: model,\n  prompt: \"Select multiple options\",\n  options: [[1, \"Some option\"], [2, \"Another option\"], [3, \"Third option\"]]\n}));\n\nquestions.push(new forms.ImageQuestion({\n  id: 'photo',\n  model: model,\n  prompt: \"Take one photo\",\n  ctx: options.ctx\n}));\n\nquestions.push(new forms.ImagesQuestion({\n  id: 'photos',\n  model: model,\n  prompt: \"Take multiple photos\",\n  ctx: options.ctx\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Basic Controls\",\n  contents: questions\n}));\n\nquestions = [];\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q30\",\n  model: model,\n  required: true,\n  prompt: \"Mandatory Question 1\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q31\",\n  model: model,\n  required: true,\n  prompt: \"Mandatory Question 2\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Required Questions\",\n  contents: questions\n}));\n\nquestions = [];\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q20\",\n  model: model,\n  prompt: \"Select to see conditional question\",\n  options: [[1, \"Option A\"], [2, \"Option B\"]]\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: \"q2\",\n  model: model,\n  prompt: \"Enter a text value for option A\",\n  conditional: function(m) {\n    return m.get(\"q20\") === 1;\n  }\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: \"q2\",\n  model: model,\n  prompt: \"Enter a different text value for option B\",\n  conditional: function(m) {\n    return m.get(\"q20\") === 2;\n  }\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Conditional Questions\",\n  contents: questions\n}));\n\nview = new forms.Sections({\n  sections: sections,\n  model: model\n});\n\nreturn new forms.SurveyView({\n  model: model,\n  contents: [view]\n});\n"}},{"_id":"341df80cfff444bdbcaab48ffd16ec6b","type":"WaterTest","name":"SenSafe Free Chlorine Water Check","desc":"US EPA approved test strip for free chlorine (manufactured by ITS)","code":"SenSafeFreeChlorine","_rev":2,"created":{"on":"2013-07-17T14:03:51.219Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:36.080Z","by":"admin"},"user":"admin","views":{"detail":"var template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var stack1;\n  if (stack1 = helpers.source) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.source; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  return escapeExpression(stack1);\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"<i>None</i>\";\n  }\n\nfunction program5(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n  \";\n  stack1 = helpers['if'].call(depth0, depth0.freeCl_mgperL, {hash:{},inverse:self.program(8, program8, data),fn:self.program(6, program6, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n\";\n  return buffer;\n  }\nfunction program6(depth0,data) {\n  \n  var buffer = \"\", stack1;\n  buffer += \"\\n  \";\n  if (stack1 = helpers.freeCl_mgperL) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.freeCl_mgperL; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \" mg/L\\n  \";\n  return buffer;\n  }\n\nfunction program8(depth0,data) {\n  \n  \n  return \"\\n  Present\\n  \";\n  }\n\nfunction program10(depth0,data) {\n  \n  \n  return \"\\n0 mg/L\\n\";\n  }\n\n  buffer += \"\\n<div><strong><i>Water Source ID</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.source, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n<div><strong><i>Free Chlorine</i></strong>: \\n\";\n  stack1 = helpers['if'].call(depth0, depth0.freeCl_present, {hash:{},inverse:self.program(10, program10, data),fn:self.program(5, program5, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"\\n</div>\\n\\n<!-- TODO photo display -->\\n\\n<div>Notes: \";\n  if (stack1 = helpers.notes) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.notes; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\";\n  return buffer;\n  });var view = Backbone.View.extend({\n  load: function(data) {\n    this.$el.html(template(data));\n  }\n});\nreturn new view();","edit":"var forms, model, questions;\n\nforms = require('forms');\n\nmodel = new Backbone.Model();\n\nquestions = [];\n\nquestions.push(new forms.Instructions({\n  html: 'Dip strip into 50 mL water sample for 20 seconds (at 24 C)<br/>\\nShake dry and read after 20 seconds, comparing to color chart on bottle'\n}));\n\nquestions.push(new forms.SourceQuestion({\n  id: 'source',\n  ctx: options.ctx,\n  model: model,\n  prompt: \"Water Source ID\"\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: 'freeCl_present',\n  model: model,\n  prompt: \"Did the color change from white to light blue?\",\n  options: [[true, 'Yes'], [false, 'No']],\n  required: true\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'freeCl_mgperL',\n  model: model,\n  prompt: \"Free chlorine (mg/L)\",\n  decimal: true,\n  conditional: function() {\n    return this.model.get('freeCl_present') === true;\n  }\n}));\n\nquestions.push(new forms.ImageQuestion({\n  id: 'photo',\n  model: model,\n  prompt: \"Photo\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: 'notes',\n  model: model,\n  prompt: \"Notes\",\n  multiline: true\n}));\n\nreturn new forms.WaterTestEditView({\n  contents: questions,\n  model: model\n});\n"}},{"type":"Survey","name":"USAID Tanzania Water User Survey","code":"USAIDTzWaterUserSurvey","_id":"08e98c800e2844acb7a0ca8dbaeb750b","_rev":1,"created":{"on":"2013-07-18T15:36:36.419Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:36.419Z","by":"admin"},"user":"admin","org":null,"views":{"edit":"var createRecallQuestions, forms, model, questions, sections, view;\n\nforms = require(\"forms\");\n\nmodel = new Backbone.Model();\n\nsections = [];\n\nquestions = [];\n\nquestions.push(new forms.TextQuestion({\n  id: \"interpreter\",\n  model: model,\n  prompt: \"Enter name of interpreter\"\n}));\n\nquestions.push(new forms.Instructions({\n  html: 'Hello, my name is _______________. I work for an NGO called mWater that is working with the Mwanza City Council on a project to improve access to safe water. Our project is funded by the United States Agency for International Development. \\n<br/> <br/> We would like to ask you a few short questions about water in your community. You are not obligated to take part in this survey. If you agree to take part, we will not reveal your identity or your phone number to anyone outside of our organization. Would you like to take part in this survey?'\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"consent\",\n  model: model,\n  prompt: \"Does the person agree?\",\n  options: [[true, \"Yes\"], [false, \"No\"]],\n  required: true\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"share_contact\",\n  model: model,\n  prompt: \"Would you like to share your name and phone number so we can contact you later? You do not have to provide this information to take part in the survey. Does the person agree?\",\n  options: [[true, \"Yes\"], [false, \"No\"]],\n  required: true\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: \"name\",\n  model: model,\n  prompt: \"Name\",\n  conditional: function(m) {\n    return m.get(\"share_contact\") === true;\n  },\n  required: true\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: \"mobile_number\",\n  model: model,\n  prompt: \"Mobile number\",\n  conditional: function(m) {\n    return m.get(\"share_contact\") === true;\n  },\n  required: true\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Introduction and Consent\",\n  contents: questions\n}));\n\nquestions = [];\n\nquestions.push(new forms.NumberQuestion({\n  id: \"num_water_sources\",\n  model: model,\n  prompt: \"How many water sources do you have to choose from?\"\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"enough_safe_sources\",\n  model: model,\n  prompt: \"Do you think you have enough safe water sources in your community?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"made_sick\",\n  model: model,\n  prompt: \"Do you think water has made anyone in your household sick in the past year?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Water Source Information\",\n  contents: questions\n}));\n\nquestions = [];\n\ncreateRecallQuestions = function(suffix, text) {\n  var qs;\n  qs = [];\n  qs.push(new forms.MulticheckQuestion({\n    id: \"water_from\" + suffix,\n    model: model,\n    prompt: \"Where did you get your water \" + text,\n    options: [['Piped water'], ['PipeDwelling', 'Piped into dwelling'], ['PipeYardPlot', 'Piped into yard/plot'], ['PipeKiosk', 'Public kiosk'], ['PipePublic', 'Public tap'], ['NeighborTap', 'Neighbor’s tap'], ['Water from open well'], ['1', 'Open well in dwelling'], ['2', 'Open well in yard/plot'], ['3', 'Open public well'], ['4', 'Neighbor’s open well'], ['Water from covered well'], ['5', 'Protected well in dwelling'], ['6', 'Protected well in yard/plot'], ['7', 'Protected public well'], ['8', 'Neighbor’s protected well'], ['Borehole'], ['9', 'Borehole in yard/plot'], ['10', 'Public borehole'], ['Surface water'], ['11', 'Spring'], ['12', 'River / stream'], ['13', 'Pond'], ['14', 'Lake Victoria'], ['15', 'Dam'], ['Other'], ['Rainwater', 'Rainwater'], ['TankerTruck', 'Tanker truck'], ['16', 'Water vendor'], ['17', 'Bottled water'], ['Other', 'Other']]\n  }));\n  qs.push(new forms.TextQuestion({\n    id: \"water_from_other\" + suffix,\n    model: model,\n    prompt: \"Other\",\n    required: true,\n    conditional: function(m) {\n      return m.get(\"water_from\" + suffix) === \"Other\";\n    }\n  }));\n  qs.push(new forms.MulticheckQuestion({\n    id: \"water_provider\" + suffix,\n    model: model,\n    prompt: \"Who provides this water?\",\n    options: [['MWAUWASA', 'MWAUWASA'], ['NGO/CBO', 'NGO / CBO'], ['PrivateOperator', 'Private operator'], ['CWA', 'Community water association']]\n  }));\n  qs.push(new forms.NumberQuestion({\n    id: \"time_get_water\" + suffix,\n    model: model,\n    prompt: \"How long did it take you to go there, get water, and come back including waiting time?\",\n    hint: \"Time in minutes\"\n  }));\n  qs.push(new forms.RadioQuestion({\n    id: \"pay_water\" + suffix,\n    model: model,\n    prompt: \"Did you pay for the water?\",\n    options: [[true, \"Yes\"], [false, \"No\"]]\n  }));\n  qs.push(new forms.NumberQuestion({\n    id: \"price_water\" + suffix,\n    model: model,\n    prompt: \"Price in Tsh?\",\n    decimal: true,\n    conditional: function(m) {\n      return m.get(\"pay_water\" + suffix) === true;\n    }\n  }));\n  qs.push(new forms.RadioQuestion({\n    id: \"source_safe\" + suffix,\n    model: model,\n    prompt: \"Do you think this source is safe?\",\n    options: [[true, \"Yes\"], [false, \"No\"]]\n  }));\n  return qs;\n};\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Water Sources Today\",\n  contents: createRecallQuestions('_today', \"today\")\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Water Sources Yesterday\",\n  contents: createRecallQuestions('_1dayago', \"yesterday\")\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Water Sources Day Before Yesterday\",\n  contents: createRecallQuestions('_2dayago', \"day before yesterday\")\n}));\n\nquestions = [];\n\nquestions.push(new forms.RadioQuestion({\n  id: \"not_enough_water\",\n  model: model,\n  prompt: \"Was there any time in the last two weeks when you did not have enough water for your household needs?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.MulticheckQuestion({\n  id: \"not_enough_water_reasons\",\n  model: model,\n  prompt: \"Was it because (check all that apply)\",\n  options: [['Closed', 'Water source closed'], ['NoWater', 'No water at source'], ['NotAfford', 'Could not afford water'], ['Other', 'Other']],\n  conditional: function(m) {\n    return m.get(\"not_enough_water\") === true;\n  }\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: \"not_enough_water_reasons_other\",\n  model: model,\n  prompt: \"Other\",\n  required: true,\n  conditional: function(m) {\n    return m.get(\"not_enough_water\") === true && m.get(\"not_enough_water_reasons\") === \"Other\";\n  }\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Water Sufficiency\",\n  contents: questions\n}));\n\nquestions = [];\n\nquestions.push(new forms.MulticheckQuestion({\n  id: \"home_storage\",\n  model: model,\n  prompt: \"How do you store water in your house?\",\n  options: [['Open', 'Open container'], ['Closed', 'Closed container'], ['ClosedSpigot', 'Closed container with spigot'], ['Tank', 'Storage tank (more than 20 L)']]\n}));\n\nquestions.push(new forms.MulticheckQuestion({\n  id: \"home_treatment\",\n  model: model,\n  prompt: \"Do you do anything to the water to make it safer to drink? If yes, check all that apply:\",\n  options: [['Boil', 'Boil'], ['Closed', 'Add bleach / chlorine'], ['ClosedSpigot', 'Add AquaGuard or PUR packet'], ['Strain', 'Strain through a cloth'], ['Filter', 'Use water filter (ceramic / sand / membrane / etc.)'], ['Solar', 'Solar disinfection'], ['Settle', 'Let it stand and settle'], ['Other', 'Other - please specify']]\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: \"home_treatment_other\",\n  model: model,\n  prompt: \"Other\",\n  required: true,\n  conditional: function(m) {\n    return m.get(\"home_treatment\") === \"Other\";\n  }\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Household storage and treatment\",\n  contents: questions\n}));\n\nview = new forms.Sections({\n  sections: sections,\n  model: model\n});\n\nreturn new forms.SurveyView({\n  model: model,\n  contents: [view]\n});\n"}},{"_id":"687e6d7e615f40b9a9404eb7fcdb9dbc","type":"WaterTest","name":"WaterWorks Nitrate / Nitrite Nitrogen","desc":"Test strip for nitrate (NO3) and nitrite (NO2) (manufactured by ITS)","code":"WaterWorksNitrateNitrite","_rev":2,"created":{"on":"2013-07-17T14:03:51.479Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:36.681Z","by":"admin"},"user":"admin","views":{"detail":"var template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\nhelpers = this.merge(helpers, Handlebars.helpers); data = data || {};\n  var buffer = \"\", stack1, functionType=\"function\", escapeExpression=this.escapeExpression, self=this;\n\nfunction program1(depth0,data) {\n  \n  var stack1;\n  if (stack1 = helpers.source) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.source; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  return escapeExpression(stack1);\n  }\n\nfunction program3(depth0,data) {\n  \n  \n  return \"<i>None</i>\";\n  }\n\n  buffer += \"\\n<div><strong><i>Water Source ID</i></strong>: \";\n  stack1 = helpers['if'].call(depth0, depth0.source, {hash:{},inverse:self.program(3, program3, data),fn:self.program(1, program1, data),data:data});\n  if(stack1 || stack1 === 0) { buffer += stack1; }\n  buffer += \"</div>\\n<div><strong><i>Nitrate (NO3) Nitrogen</i></strong>: \";\n  if (stack1 = helpers.no3_mgperL) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.no3_mgperL; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \" mg/L</div>\\n<div><strong><i>Nitrite (NO2) Nitrogen</i></strong>: \";\n  if (stack1 = helpers.no2_mgperL) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.no2_mgperL; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \" mg/L</div>\\n\\n<!-- TODO photo display -->\\n\\n<div>Notes: \";\n  if (stack1 = helpers.notes) { stack1 = stack1.call(depth0, {hash:{},data:data}); }\n  else { stack1 = depth0.notes; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }\n  buffer += escapeExpression(stack1)\n    + \"</div>\";\n  return buffer;\n  });var view = Backbone.View.extend({\n  load: function(data) {\n    this.$el.html(template(data));\n  }\n});\nreturn new view();","edit":"var forms, model, questions;\n\nforms = require('forms');\n\nmodel = new Backbone.Model();\n\nquestions = [];\n\nquestions.push(new forms.SourceQuestion({\n  id: 'source',\n  ctx: options.ctx,\n  model: model,\n  prompt: \"Water Source ID\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'no3_mgperL',\n  model: model,\n  prompt: \"Nitrate (NO3) Nitrogen (mg / L)\",\n  required: true,\n  decimal: true\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: 'no2_mgperL',\n  model: model,\n  prompt: \"Nitrite (NO2) Nitrogen (mg / L)\",\n  required: true,\n  decimal: true\n}));\n\nquestions.push(new forms.ImageQuestion({\n  id: 'photo',\n  model: model,\n  prompt: \"Photo\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: 'notes',\n  model: model,\n  prompt: \"Notes\",\n  multiline: true\n}));\n\nreturn new forms.WaterTestEditView({\n  contents: questions,\n  model: model\n});\n"}},{"_id":"556f7353ca60476e87abf1f901e8a507","type":"Survey","name":"WHO UNICEF Sanitary Inspection and Pollution Risk Assessment","code":"WHOSIPRA","_rev":2,"created":{"on":"2013-07-17T14:03:52.439Z","by":"admin"},"modified":{"on":"2013-07-18T15:36:37.378Z","by":"admin"},"user":"admin","views":{"edit":"var forms, model, questions, sections, view;\n\nforms = require(\"forms\");\n\nmodel = new Backbone.Model();\n\nsections = [];\n\nquestions = [];\n\nquestions.push(new forms.SourceQuestion({\n  id: 'source',\n  ctx: options.ctx,\n  model: model,\n  prompt: \"Water Source ID\"\n}));\n\nquestions.push(new forms.DropdownQuestion({\n  id: \"q1\",\n  model: model,\n  required: true,\n  prompt: \"What is the type of facility?\",\n  options: [[\"PipedWater\", \"Piped Water\"], [\"PipedWaterRes\", \"Piped Water with Service Reservoir\"], [\"GravityFedPiped\", \"Gravity-fed Piped Water\"], [\"BoreholeMech\", \"Deep Borehole with Mechanized Pumping\"], [\"BoreholeHand\", \"Deep Borehole with Handpump\"], [\"ProtectedSpring\", \"Protected Spring\"], [\"DugWellPump\", \"Dug Well with Handpump/windlass\"], [\"TreatmentPlant\", \"Water Treatment Plant\"]]\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: \"q2\",\n  model: model,\n  prompt: \"Cluster number?\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: \"q3\",\n  model: model,\n  prompt: \"Cluster name?\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: \"q4\",\n  model: model,\n  prompt: \"What is the name of the community?\"\n}));\n\nquestions.push(new forms.DateQuestion({\n  id: \"q5\",\n  model: model,\n  prompt: \"Date of visit?\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: \"q6\",\n  model: model,\n  prompt: \"How many water samples were taken?\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: \"q7\",\n  model: model,\n  prompt: \"Water sample numbers?\"\n}));\n\nquestions.push(new forms.NumberQuestion({\n  id: \"q8\",\n  model: model,\n  prompt: \"FC/100ml?\"\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"General Information\",\n  contents: questions\n}));\n\nquestions = [];\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q9\",\n  model: model,\n  required: true,\n  prompt: \"Do any tapstands leak?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q10\",\n  model: model,\n  required: true,\n  prompt: \"Does surface water collect around any tapstand?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q11\",\n  model: model,\n  required: true,\n  prompt: \"Is the area uphill of any tapstand eroded?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q12\",\n  model: model,\n  required: true,\n  prompt: \"Are pipes exposed close to any tapstand?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q13\",\n  model: model,\n  required: true,\n  prompt: \"Is human excreta on the ground within 10m of any tapstand?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q14\",\n  model: model,\n  required: true,\n  prompt: \"Is there a sewer within 30m of any tapstand?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q15\",\n  model: model,\n  required: true,\n  prompt: \"Has there been discontinuity in the last 10 days at any tapstand?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q16\",\n  model: model,\n  required: true,\n  prompt: \"Are there signs of leaks in the mains pipes in the cluster?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q17\",\n  model: model,\n  required: true,\n  prompt: \"Do the community report any pipe breaks in the last week?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q18\",\n  model: model,\n  required: true,\n  prompt: \"Is the main pipe exposed anywhere in the cluster?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Piped Water Survey\",\n  contents: questions,\n  conditional: function(m) {\n    return m.get(\"q1\") === \"PipedWater\";\n  }\n}));\n\nquestions = [];\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q19\",\n  model: model,\n  required: true,\n  prompt: \"Do any standpipes leak at sample sites?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q20\",\n  model: model,\n  required: true,\n  prompt: \"Does water collect around any sample site?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q21\",\n  model: model,\n  required: true,\n  prompt: \"Is area uphill eroded at any sample site?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q22\",\n  model: model,\n  required: true,\n  prompt: \"Are pipes exposed close to any sample site?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q23\",\n  model: model,\n  required: true,\n  prompt: \"Is human excreta on ground within 10m of standpipe?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q24\",\n  model: model,\n  required: true,\n  prompt: \"Sewer or latrine within 30m of sample site?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q25\",\n  model: model,\n  required: true,\n  prompt: \"Has there been discontinuity within last 10 days at sample site?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q26\",\n  model: model,\n  required: true,\n  prompt: \"Are there signs of leaks in sampling area?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q27\",\n  model: model,\n  required: true,\n  prompt: \"Do users report pipe breaks in last week?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q28\",\n  model: model,\n  required: true,\n  prompt: \"Is the supply main exposed in sampling area?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q29\",\n  model: model,\n  required: true,\n  prompt: \"Do users report pipe breaks in last week?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q30\",\n  model: model,\n  required: true,\n  prompt: \"Is the service reservoir cracked or leaking?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q31\",\n  model: model,\n  required: true,\n  prompt: \"Are the air vents or inspection cover insanitary?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Piped Water with Service Reservoir Survey\",\n  contents: questions,\n  conditional: function(m) {\n    return m.get(\"q1\") === \"PipedWaterRes\";\n  }\n}));\n\nquestions = [];\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q32\",\n  model: model,\n  required: true,\n  prompt: \"Does the pipe leak between the source and storage tank?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q33\",\n  model: model,\n  required: true,\n  prompt: \"Is the storage tank cracked, damaged or leak?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q34\",\n  model: model,\n  required: true,\n  prompt: \"Are the vents and covers on the tank damaged or open?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q35\",\n  model: model,\n  required: true,\n  prompt: \"Do any tapstands leak?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q36\",\n  model: model,\n  required: true,\n  prompt: \"Does surface water collect around any tapstand?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q37\",\n  model: model,\n  required: true,\n  prompt: \"Is the area uphill of any tapstand eroded?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q38\",\n  model: model,\n  required: true,\n  prompt: \"Are pipes exposed close to any tapstand?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q39\",\n  model: model,\n  required: true,\n  prompt: \"Is human excreta on the ground within 10m of any tapstand?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q40\",\n  model: model,\n  required: true,\n  prompt: \"Has there been discontinuity in the last 10 days at any tapstand?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q41\",\n  model: model,\n  required: true,\n  prompt: \"Are there signs of leaks in the main supply pipe in the system?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q42\",\n  model: model,\n  required: true,\n  prompt: \"Do the community report any pipe breaks in the last week?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q43\",\n  model: model,\n  required: true,\n  prompt: \"Is the main supply pipe exposed anywhere in the system?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Gravity-fed Piped Water Survey\",\n  contents: questions,\n  conditional: function(m) {\n    return m.get(\"q1\") === \"GravityFedPiped\";\n  }\n}));\n\nquestions = [];\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q44\",\n  model: model,\n  required: true,\n  prompt: \"Is there a latrine or sewer within 100m of pumphouse?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q45\",\n  model: model,\n  required: true,\n  prompt: \"Is the nearest latrine unsewered?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q46\",\n  model: model,\n  required: true,\n  prompt: \"Is there any source of other pollution within 50m?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q47\",\n  model: model,\n  required: true,\n  prompt: \"Is there an uncapped well within 100m?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q48\",\n  model: model,\n  required: true,\n  prompt: \"Is the drainage around pumphouse faulty?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q49\",\n  model: model,\n  required: true,\n  prompt: \"Is the fencing damaged allowing animal entry?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q50\",\n  model: model,\n  required: true,\n  prompt: \"Is the floor of the pumphouse permeable to water?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q51\",\n  model: model,\n  required: true,\n  prompt: \"Does water forms pools in the pumphouse?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q52\",\n  model: model,\n  required: true,\n  prompt: \"Is the well seal insanitary?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Deep Borehole with Mechanized Pumping Survey\",\n  contents: questions,\n  conditional: function(m) {\n    return m.get(\"q1\") === \"BoreholeMech\";\n  }\n}));\n\nquestions = [];\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q53\",\n  model: model,\n  required: true,\n  prompt: \"Is there a latrine within 10m of the borehole?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q54\",\n  model: model,\n  required: true,\n  prompt: \"Is there a latrine uphill of the borehole?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q55\",\n  model: model,\n  required: true,\n  prompt: \"Are there any other sources of pollution within 10m of borehole? (e.g. animal breeding, cultivation, roads, industry etc)\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q56\",\n  model: model,\n  required: true,\n  prompt: \"Is the drainage faulty allowing ponding within 2m of the borehole?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q57\",\n  model: model,\n  required: true,\n  prompt: \"Is the drainage channel cracked, broken or need cleaning?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q58\",\n  model: model,\n  required: true,\n  prompt: \"Is the fence missing or faulty?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q59\",\n  model: model,\n  required: true,\n  prompt: \"Is the apron less than 1m in radius?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q60\",\n  model: model,\n  required: true,\n  prompt: \"Does spilt water collect in the apron area?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q61\",\n  model: model,\n  required: true,\n  prompt: \"Is the apron cracked or damaged?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q62\",\n  model: model,\n  required: true,\n  prompt: \"Is the handpump loose at the point of attachment to apron?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Deep Borehole with Handpump Survey\",\n  contents: questions,\n  conditional: function(m) {\n    return m.get(\"q1\") === \"BoreholeHand\";\n  }\n}));\n\nquestions = [];\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q63\",\n  model: model,\n  required: true,\n  prompt: \"Is the spring unprotected?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q64\",\n  model: model,\n  required: true,\n  prompt: \"Is the masonary protecting the spring faulty?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q65\",\n  model: model,\n  required: true,\n  prompt: \"Is the backfill area behind the retaining wall eroded?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q66\",\n  model: model,\n  required: true,\n  prompt: \"Does spilt water flood the collection area?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q67\",\n  model: model,\n  required: true,\n  prompt: \"Is the fence absent or faulty?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q68\",\n  model: model,\n  required: true,\n  prompt: \"Can animals have access within 10m of the spring?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q69\",\n  model: model,\n  required: true,\n  prompt: \"Is there a latrine uphill and/or within 30m of the spring?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q70\",\n  model: model,\n  required: true,\n  prompt: \"Does surface water collect uphill of the spring?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q71\",\n  model: model,\n  required: true,\n  prompt: \"Is the diversion ditch above the spring absent or non-functional?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q72\",\n  model: model,\n  required: true,\n  prompt: \"Are there any other sources of pollution uphill of the spring? (e.g. solid waste)\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Protected Spring Survey\",\n  contents: questions,\n  conditional: function(m) {\n    return m.get(\"q1\") === \"ProtectedSpring\";\n  }\n}));\n\nquestions = [];\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q73\",\n  model: model,\n  required: true,\n  prompt: \"Is there a latrine within 10m of the well?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q74\",\n  model: model,\n  required: true,\n  prompt: \"Is the nearest latrine uphill of the well?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q75\",\n  model: model,\n  required: true,\n  prompt: \"Is there any other source of pollution within 10m of well? (e.g. animal breeding, cultivation, roads, industry etc)\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q76\",\n  model: model,\n  required: true,\n  prompt: \"Is the drainage faulty allowing ponding within 2m of the well?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q77\",\n  model: model,\n  required: true,\n  prompt: \"Is the drainage channel cracked, broken or need cleaning?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q78\",\n  model: model,\n  required: true,\n  prompt: \"Is the fence missing or faulty?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q79\",\n  model: model,\n  required: true,\n  prompt: \"Is the cement less than 1m in radius around the top of the well?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q80\",\n  model: model,\n  required: true,\n  prompt: \"Does spilt water collect in the apron area?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q81\",\n  model: model,\n  required: true,\n  prompt: \"Are there cracks in the cement floor?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q82\",\n  model: model,\n  required: true,\n  prompt: \"Is the handpump loose at the point of attachment to well head?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nquestions.push(new forms.RadioQuestion({\n  id: \"q83\",\n  model: model,\n  required: true,\n  prompt: \"Is the well-cover insanity?\",\n  options: [[true, \"Yes\"], [false, \"No\"]]\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Dug Well with Handpump/windlass Survey\",\n  contents: questions,\n  conditional: function(m) {\n    return m.get(\"q1\") === \"DugWellPump\";\n  }\n}));\n\nquestions = [];\n\nquestions.push(new forms.TextQuestion({\n  id: \"q100\",\n  model: model,\n  prompt: \"Additional comments\"\n}));\n\nquestions.push(new forms.TextQuestion({\n  id: \"q101\",\n  model: model,\n  prompt: \"Inspector name\"\n}));\n\nsections.push(new forms.Section({\n  model: model,\n  title: \"Additional comments\",\n  contents: questions\n}));\n\nquestions = [];\n\nview = new forms.Sections({\n  title: \"WHO UNICEF Sanitary Inspection and Pollution Risk Assessment\",\n  sections: sections,\n  model: model\n});\n\nreturn new forms.SurveyView({\n  model: model,\n  contents: [view]\n});\n"}}];